# 썸플 (Sample) - AI 영상 요약 및 편집 SaaS 플랫폼

## Overview

썸플은 AI 기술을 활용한 영상 요약 및 편집 SaaS 플랫폼입니다. YouTube, Chzzk, Soop 등 다양한 플랫폼의 영상을 분석하여 스크립트를 추출하고, 텍스트 요약을 제공하며, 자동 자막 생성 및 하이라이트 추출 기능을 통해 콘텐츠 크리에이터의 작업 효율성을 극대화합니다.

**핵심 가치 제안:**
- 영상의 모든 구간에 대응하는 정확한 스크립트 추출
- 타임라인 기반 텍스트 요약으로 핵심 내용 빠른 파악
- 협업 기반 영상 편집으로 팀워크 향상
- 사용량 기반 결제로 비용 효율성 확보

**타겟 사용자:** 콘텐츠 크리에이터, 유튜버, 스트리머, 교육 콘텐츠 제작자

## Core Features

### 1. 워크플레이스 기반 계정 관리
- **개인 계정 - 워크플레이스 구조**: 노션과 유사한 계층적 구조
- **이메일 기반 인증**: 소셜 로그인 지원 (Google, GitHub 등)
- **워크플레이스별 영상 저장소**: 각 워크플레이스마다 독립적인 영상 관리
- **멤버 관리**: 워크플레이스 내 협업자 초대 및 권한 관리

### 2. AI 영상 요약 서비스
- **다중 플랫폼 지원**: YouTube, Chzzk, Soop 연동
- **스크립트 추출**: 영상의 모든 구간에 대응하는 정확한 텍스트 추출
  - 타임스탬프 기반 구간별 텍스트 표시
  - 실시간 스크립트 하이라이트 기능
  - 다국어 지원 (한국어 우선)
- **텍스트 요약**: 영상 구간별 핵심 내용 요약
  - 구간별 제목 및 불릿 포인트 요약
  - 요약 내용 분류 및 태깅 기능
  - 요약 재생성 기능

### 3. AI 영상 편집 서비스
- **Premiere Pro 스타일 UI**: 전문적인 편집 인터페이스
- **자동 자막 생성**: AI 기반 자막 생성 및 편집
- **하이라이트 추출**: 중요 구간 자동 감지 및 추출
- **프론트엔드 편집**: 브라우저에서 직접 영상 편집 가능
- **협업 편집**: 실시간 멤버 간 편집 협업
- **댓글 기반 피드백**: 영상 구간별 댓글 및 피드백 시스템

### 4. 영상 저장소 및 관리
- **워크플레이스별 저장소**: 각 워크플레이스의 독립적인 영상 관리
- **메타데이터 관리**: 영상 정보, 태그, 분류 관리
- **버전 관리**: 편집 히스토리 및 버전 추적
- **검색 및 필터링**: 제목, 태그, 날짜 기반 검색

## User Experience

### 사용자 페르소나
1. **개인 콘텐츠 크리에이터**: 유튜버, 스트리머
   - 빠른 영상 요약으로 콘텐츠 기획 효율화
   - 자동 자막으로 접근성 향상
2. **팀 기반 콘텐츠 제작팀**: 교육 콘텐츠, 기업 마케팅
   - 협업 편집으로 팀워크 향상
   - 댓글 기반 피드백으로 품질 관리

### 핵심 사용자 플로우
1. **워크플레이스 생성 → 멤버 초대**
2. **영상 업로드/연동 → AI 분석**
3. **스크립트 추출 → 요약 생성**
4. **편집 작업 → 협업 피드백**
5. **최종 출력 → 공유/배포**

### UI/UX 고려사항
- **다크 테마 우선**: 이미지에서 확인된 다크 테마 적용
- **3패널 레이아웃**: 프로그램(영상), 요약, 댓글 영역
- **타임라인 기반 인터페이스**: 영상 구간과 텍스트 동기화
- **실시간 협업**: 댓글과 피드백 시스템

## Technical Architecture

### 프론트엔드 (NextJS)
- **Next.js 14**: App Router 기반 구조
- **TypeScript**: 타입 안정성 확보
- **Tailwind CSS**: 다크 테마 및 반응형 디자인
- **상태 관리**: Zustand 또는 Redux Toolkit
- **영상 처리**: WebRTC, MediaRecorder API
- **실시간 협업**: Socket.io 클라이언트

### 백엔드 (NestJS)
- **NestJS**: 새로 개발 예정
- **REST API**: 프론트엔드와 통신
- **WebSocket**: 실시간 협업 기능
- **파일 저장**: AWS S3 또는 유사 서비스
- **데이터베이스**: PostgreSQL (사용자, 워크플레이스, 영상 메타데이터)
- **API 설계**: 프론트엔드 요구사항에 맞춘 엔드포인트 설계

### AI 서비스
- **별도 개발 완료**: 스크립트 추출, 요약, 자막 생성
- **API 연동**: 백엔드를 통한 AI 서비스 호출
- **실시간 처리**: 영상 업로드 시 즉시 분석

### 인증 시스템
- **이메일 기반**: 기본 회원가입/로그인
- **소셜 로그인**: Google, Naver 등
- **JWT 토큰**: 세션 관리
- **워크플레이스 권한**: 멤버별 권한 관리

### 결제 시스템
- **사용량 기반**: 영상 처리 시간, 저장 용량 기준
- **구독 모델**: 월간/연간 플랜
- **결제 게이트웨이**: Stripe 또는 국내 PG사 연동

## Development Roadmap

### Phase 1: MVP (기본 기능)
- **백엔드 개발**: NestJS 기반 API 서버 구축
- **워크플레이스 구조**: 개인 계정 - 워크플레이스 시스템
- **기본 인증**: 이메일 + 소셜 로그인
- **영상 업로드**: YouTube, Chzzk, Soop 연동
- **스크립트 추출**: 기본 텍스트 추출 기능
- **요약 생성**: 구간별 텍스트 요약
- **기본 UI**: 3패널 레이아웃 구현

### Phase 2: 편집 기능
- **편집 인터페이스**: Premiere Pro 스타일 UI
- **자동 자막**: AI 기반 자막 생성
- **하이라이트 추출**: 중요 구간 자동 감지
- **프론트엔드 편집**: 브라우저 내 편집 기능
- **협업 기능**: 실시간 멤버 간 협업
- **댓글 시스템**: 구간별 피드백

### Phase 3: 고급 기능
- **고급 분석**: 감정 분석, 키워드 추출
- **템플릿 시스템**: 자주 사용하는 편집 템플릿
- **API 제공**: 외부 서비스 연동
- **모바일 최적화**: 반응형 웹 앱
- **고급 권한 관리**: 세밀한 권한 제어

### Phase 4: 확장 기능
- **다국어 지원**: 영어, 일본어 등 추가
- **고급 협업**: 화상 회의 통합
- **AI 개선**: 더 정확한 분석 및 편집
- **엔터프라이즈 기능**: 대규모 팀 지원

## Logical Dependency Chain

### 1단계: 기반 시스템 (Foundation)
- **백엔드 API**: NestJS 기반 REST API 구축
- **인증 시스템**: 사용자 관리 기반
- **워크플레이스 구조**: 모든 서비스의 컨테이너
- **영상 저장소**: 데이터 관리 기반
- **기본 UI**: 3패널 레이아웃

### 2단계: 핵심 기능 (Core Features)
- **스크립트 추출**: AI 분석 결과 표시
- **요약 생성**: 핵심 기능 완성
- **기본 편집**: 간단한 편집 기능

### 3단계: 협업 기능 (Collaboration)
- **실시간 협업**: 멤버 간 동시 편집
- **댓글 시스템**: 피드백 및 소통
- **권한 관리**: 세밀한 접근 제어

### 4단계: 고급 기능 (Advanced)
- **자동 자막**: 편집 효율성 향상
- **하이라이트 추출**: 콘텐츠 가치 증대
- **결제 시스템**: 수익화

### 5단계: 최적화 (Optimization)
- **성능 최적화**: 대용량 영상 처리
- **사용자 경험**: UI/UX 개선
- **확장성**: 대규모 사용자 지원

## Risks and Mitigations

### 기술적 도전
- **대용량 영상 처리**: 
  - 위험: 서버 부하 및 처리 시간
  - 완화: 청크 단위 처리, CDN 활용
- **실시간 협업**: 
  - 위험: 동시 편집 충돌
  - 완화: Operational Transform 알고리즘 적용
- **AI 모델 성능**: 
  - 위험: 정확도 부족
  - 완화: 지속적인 모델 개선, 사용자 피드백 반영

### MVP 정의
- **핵심 기능 우선**: 스크립트 추출과 요약에 집중
- **단계적 출시**: 기능별 순차적 개발
- **사용자 피드백**: 초기 사용자 테스트 반영

### 리소스 제약
- **개발 인력**: 
  - 위험: 복잡한 기능 개발 시간
  - 완화: 우선순위 기반 개발, 외부 라이브러리 활용
- **서버 비용**: 
  - 위험: 영상 처리 비용 증가
  - 완화: 사용량 기반 결제, 효율적인 리소스 관리

## Appendix

### 기술 스택 상세
- **프론트엔드**: Next.js 14, TypeScript, Tailwind CSS
- **백엔드**: NestJS (개발 예정)
- **AI 서비스**: 별도 개발 완료
- **데이터베이스**: PostgreSQL
- **파일 저장**: AWS S3
- **실시간 통신**: Socket.io
- **결제**: Stripe 또는 국내 PG사

### UI/UX 가이드라인
- **다크 테마**: 사용자 친화적 다크 모드
- **3패널 레이아웃**: 프로그램-요약-댓글 구조
- **타임라인 기반**: 영상과 텍스트 동기화
- **반응형 디자인**: 다양한 화면 크기 지원

### 성능 목표
- **영상 업로드**: 5분 이내 처리 시작
- **스크립트 추출**: 실시간 진행률 표시
- **요약 생성**: 1분 이내 완료
- **편집 응답**: 100ms 이내 UI 반응 